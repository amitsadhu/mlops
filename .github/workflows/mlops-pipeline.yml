name: MLOps CI Pipeline

on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]

env:
  CLUSTER_NAME: mlops-test-cluster
  INGRESS_NAMESPACE: ingress-nginx
  APP_NAMESPACE: default

jobs:
  mlops-pipeline:
    name: MLOps Kubernetes Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup KinD
        uses: engineerd/setup-kind@v0.6.0
        with:
          version: "v0.24.0"
          skipClusterCreation: true
      
      - name: Validate Prerequisites
        run: |
          echo "üîç Validating prerequisites..."
          
          # Verify tools are available
          kind version
          kubectl version --client
          docker version
          
          # Verify configuration files
          if [[ ! -f "config/kind-cluster.yaml" ]]; then
            echo "‚ùå KinD configuration not found"
            exit 1
          fi
          
          echo "‚úÖ All prerequisites validated"
      
      - name: Provision Kubernetes Cluster
        id: cluster-provision
        run: |
          echo "üöÄ Starting cluster provisioning..."
          
          # Create config directory if it doesn't exist
          mkdir -p config
          
          # Run cluster provisioning script
          bash scripts/provision-cluster.sh
          
          # Export cluster status for later steps
          echo "cluster_ready=true" >> $GITHUB_OUTPUT
          echo "cluster_context=kind-${CLUSTER_NAME}" >> $GITHUB_OUTPUT
      
      - name: Validate Cluster Status
        if: steps.cluster-provision.outputs.cluster_ready == 'true'
        run: |
          echo "üè• Performing comprehensive cluster validation..."
          
          CONTEXT="kind-${CLUSTER_NAME}"
          
          # Test cluster connectivity
          kubectl cluster-info --context "$CONTEXT"
          
          # Verify all nodes are ready
          echo "üìä Node Status:"
          kubectl get nodes --context "$CONTEXT" -o wide
          
          # Check system pods
          echo "üîç System Pods Status:"
          kubectl get pods -n kube-system --context "$CONTEXT"
          
          # Verify we have the expected number of nodes
          NODE_COUNT=$(kubectl get nodes --context "$CONTEXT" --no-headers | wc -l)
          if [[ "$NODE_COUNT" -ne 3 ]]; then
            echo "‚ùå Expected 3 nodes, found $NODE_COUNT"
            exit 1
          fi
          
          echo "‚úÖ Cluster validation completed successfully"
      
      - name: Post Cluster Status to PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const clusterReady = '${{ steps.cluster-provision.outputs.cluster_ready }}' === 'true';
            const status = clusterReady ? '‚úÖ Success' : '‚ùå Failed';
            const emoji = clusterReady ? 'üéâ' : 'üí•';
            
            const body = `${emoji} **Task 2: Kubernetes Cluster Provisioning**
            
            **Status:** ${status}
            **Cluster Name:** ${{ env.CLUSTER_NAME }}
            **Nodes:** ${clusterReady ? '3 nodes (1 control-plane, 2 workers)' : 'Provisioning failed'}
            
            **Configuration:**
            - Multi-node setup with KinD
            - Port mappings for ingress (80, 443, 30080, 30081)
            - Pod subnet: 10.244.0.0/16
            - Service subnet: 10.96.0.0/12
            
            **Next Steps:**
            ${clusterReady ? '- ‚úÖ Ready for Task 3: Ingress Controller Setup' : '- üîÑ Retry cluster provisioning'}
            
            ---
            *Updated at: ${new Date().toISOString()}*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
      
      # Placeholder for next tasks
      - name: Prepare for Next Tasks
        if: steps.cluster-provision.outputs.cluster_ready == 'true'
        run: |
          echo "üéØ Cluster provisioning completed successfully!"
          echo "Ready for upcoming tasks:"
          echo "  - Task 3: Ingress Controller Deployment"
          echo "  - Task 4: HTTP-echo Deployments"
          echo "  - Task 5: Ingress Routing Configuration"
          echo "  - Task 6: Health Checks"
          echo "  - Task 7: Load Testing"
          echo "  - Task 8: Results Reporting"

